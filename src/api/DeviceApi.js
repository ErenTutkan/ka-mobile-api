/**
 * Kolay Asistan Mobile API
 * Kolay Asistan mobile application api layer. Revision Date: 04.12.2022
 *
 * The version of the OpenAPI document: v1
 * Contact: ahmetyagibasan@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeviceDTO from '../model/DeviceDTO';

/**
* Device service.
* @module api/DeviceApi
* @version v1
*/
export default class DeviceApi {

    /**
    * Constructs a new DeviceApi. 
    * @alias module:api/DeviceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deviceControllerAddNewDevice operation.
     * @callback module:api/DeviceApi~deviceControllerAddNewDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new device
     * @param {module:model/DeviceDTO} deviceDTO 
     * @param {module:api/DeviceApi~deviceControllerAddNewDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceDTO}
     */
    deviceControllerAddNewDevice(deviceDTO, callback) {
      let postBody = deviceDTO;
      // verify the required parameter 'deviceDTO' is set
      if (deviceDTO === undefined || deviceDTO === null) {
        throw new Error("Missing the required parameter 'deviceDTO' when calling deviceControllerAddNewDevice");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceDTO;
      return this.apiClient.callApi(
        '/device', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceControllerDelete operation.
     * @callback module:api/DeviceApi~deviceControllerDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete
     * @param {Number} id 
     * @param {module:api/DeviceApi~deviceControllerDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deviceControllerDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deviceControllerDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceControllerFindUserAllItems operation.
     * @callback module:api/DeviceApi~deviceControllerFindUserAllItemsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find User All Items
     * @param {module:api/DeviceApi~deviceControllerFindUserAllItemsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deviceControllerFindUserAllItems(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/findUserAllItems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceControllerFindUserItem operation.
     * @callback module:api/DeviceApi~deviceControllerFindUserItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find User Item
     * @param {Number} id 
     * @param {module:api/DeviceApi~deviceControllerFindUserItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deviceControllerFindUserItem(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deviceControllerFindUserItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/findUserItem/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceControllerUpdate operation.
     * @callback module:api/DeviceApi~deviceControllerUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update device info
     * @param {Number} id 
     * @param {module:model/DeviceDTO} deviceDTO 
     * @param {module:api/DeviceApi~deviceControllerUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceDTO}
     */
    deviceControllerUpdate(id, deviceDTO, callback) {
      let postBody = deviceDTO;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deviceControllerUpdate");
      }
      // verify the required parameter 'deviceDTO' is set
      if (deviceDTO === undefined || deviceDTO === null) {
        throw new Error("Missing the required parameter 'deviceDTO' when calling deviceControllerUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceDTO;
      return this.apiClient.callApi(
        '/device/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
