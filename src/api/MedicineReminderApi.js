/**
 * Kolay Asistan Mobile API
 * Kolay Asistan mobile application api layer. Revision Date: 04.12.2022
 *
 * The version of the OpenAPI document: v1
 * Contact: ahmetyagibasan@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ReminderDTO from '../model/ReminderDTO';

/**
* MedicineReminder service.
* @module api/MedicineReminderApi
* @version v1
*/
export default class MedicineReminderApi {

    /**
    * Constructs a new MedicineReminderApi. 
    * @alias module:api/MedicineReminderApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the reminderControllerCreate operation.
     * @callback module:api/MedicineReminderApi~reminderControllerCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReminderDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add
     * @param {module:model/ReminderDTO} reminderDTO 
     * @param {module:api/MedicineReminderApi~reminderControllerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReminderDTO}
     */
    reminderControllerCreate(reminderDTO, callback) {
      let postBody = reminderDTO;
      // verify the required parameter 'reminderDTO' is set
      if (reminderDTO === undefined || reminderDTO === null) {
        throw new Error("Missing the required parameter 'reminderDTO' when calling reminderControllerCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReminderDTO;
      return this.apiClient.callApi(
        '/reminder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reminderControllerDelete operation.
     * @callback module:api/MedicineReminderApi~reminderControllerDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete
     * @param {Number} id 
     * @param {module:api/MedicineReminderApi~reminderControllerDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reminderControllerDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reminderControllerDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/reminder/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reminderControllerFindUserAllItems operation.
     * @callback module:api/MedicineReminderApi~reminderControllerFindUserAllItemsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find User All Items
     * @param {module:api/MedicineReminderApi~reminderControllerFindUserAllItemsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reminderControllerFindUserAllItems(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/reminder/findUserAllItems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reminderControllerFindUserItem operation.
     * @callback module:api/MedicineReminderApi~reminderControllerFindUserItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find User Item
     * @param {Number} id 
     * @param {module:api/MedicineReminderApi~reminderControllerFindUserItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reminderControllerFindUserItem(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reminderControllerFindUserItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/reminder/findUserItem/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reminderControllerUpdate operation.
     * @callback module:api/MedicineReminderApi~reminderControllerUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReminderDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update
     * @param {Number} id 
     * @param {module:model/ReminderDTO} reminderDTO 
     * @param {module:api/MedicineReminderApi~reminderControllerUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReminderDTO}
     */
    reminderControllerUpdate(id, reminderDTO, callback) {
      let postBody = reminderDTO;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reminderControllerUpdate");
      }
      // verify the required parameter 'reminderDTO' is set
      if (reminderDTO === undefined || reminderDTO === null) {
        throw new Error("Missing the required parameter 'reminderDTO' when calling reminderControllerUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReminderDTO;
      return this.apiClient.callApi(
        '/reminder/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
