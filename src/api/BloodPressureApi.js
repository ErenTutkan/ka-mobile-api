/**
 * Kolay Asistan Mobile API
 * Kolay Asistan mobile application api layer. Revision Date: 04.12.2022
 *
 * The version of the OpenAPI document: v1
 * Contact: ahmetyagibasan@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BloodPressureDTO from '../model/BloodPressureDTO';

/**
* BloodPressure service.
* @module api/BloodPressureApi
* @version v1
*/
export default class BloodPressureApi {

    /**
    * Constructs a new BloodPressureApi. 
    * @alias module:api/BloodPressureApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bloodPressureControllerCreate operation.
     * @callback module:api/BloodPressureApi~bloodPressureControllerCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BloodPressureDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add
     * @param {module:model/BloodPressureDTO} bloodPressureDTO 
     * @param {module:api/BloodPressureApi~bloodPressureControllerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BloodPressureDTO}
     */
    bloodPressureControllerCreate(bloodPressureDTO, callback) {
      let postBody = bloodPressureDTO;
      // verify the required parameter 'bloodPressureDTO' is set
      if (bloodPressureDTO === undefined || bloodPressureDTO === null) {
        throw new Error("Missing the required parameter 'bloodPressureDTO' when calling bloodPressureControllerCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BloodPressureDTO;
      return this.apiClient.callApi(
        '/blood-pressure', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bloodPressureControllerDelete operation.
     * @callback module:api/BloodPressureApi~bloodPressureControllerDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * De
     * @param {Number} id 
     * @param {module:api/BloodPressureApi~bloodPressureControllerDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bloodPressureControllerDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bloodPressureControllerDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/blood-pressure/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bloodPressureControllerFindUserAllItems operation.
     * @callback module:api/BloodPressureApi~bloodPressureControllerFindUserAllItemsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find User All Items
     * @param {module:api/BloodPressureApi~bloodPressureControllerFindUserAllItemsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bloodPressureControllerFindUserAllItems(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/blood-pressure/findUserAllItems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bloodPressureControllerFindUserItem operation.
     * @callback module:api/BloodPressureApi~bloodPressureControllerFindUserItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find User Item
     * @param {Number} id 
     * @param {module:api/BloodPressureApi~bloodPressureControllerFindUserItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bloodPressureControllerFindUserItem(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bloodPressureControllerFindUserItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/blood-pressure/findUserItem/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bloodPressureControllerUpdate operation.
     * @callback module:api/BloodPressureApi~bloodPressureControllerUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BloodPressureDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update
     * @param {Number} id 
     * @param {module:model/BloodPressureDTO} bloodPressureDTO 
     * @param {module:api/BloodPressureApi~bloodPressureControllerUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BloodPressureDTO}
     */
    bloodPressureControllerUpdate(id, bloodPressureDTO, callback) {
      let postBody = bloodPressureDTO;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bloodPressureControllerUpdate");
      }
      // verify the required parameter 'bloodPressureDTO' is set
      if (bloodPressureDTO === undefined || bloodPressureDTO === null) {
        throw new Error("Missing the required parameter 'bloodPressureDTO' when calling bloodPressureControllerUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BloodPressureDTO;
      return this.apiClient.callApi(
        '/blood-pressure/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
