/**
 * Kolay Asistan Mobile API
 * Kolay Asistan mobile application api layer. Revision Date: 25.03.2023
 *
 * The version of the OpenAPI document: v4.0.0.0
 * Contact: ahmetyagibasan@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserLoginDTO model module.
 * @module model/UserLoginDTO
 * @version v4.0.0.0
 */
class UserLoginDTO {
    /**
     * Constructs a new <code>UserLoginDTO</code>.
     * @alias module:model/UserLoginDTO
     * @param authType {module:model/UserLoginDTO.AuthTypeEnum} Loging type
     * @param username {String} User email address. please set email address. not set username
     * @param password {String} password
     * @param uuid {String} uuid
     */
    constructor(authType, username, password, uuid) { 
        
        UserLoginDTO.initialize(this, authType, username, password, uuid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, authType, username, password, uuid) { 
        obj['authType'] = authType;
        obj['username'] = username;
        obj['password'] = password;
        obj['uuid'] = uuid;
    }

    /**
     * Constructs a <code>UserLoginDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserLoginDTO} obj Optional instance to populate.
     * @return {module:model/UserLoginDTO} The populated <code>UserLoginDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserLoginDTO();

            if (data.hasOwnProperty('authType')) {
                obj['authType'] = ApiClient.convertToType(data['authType'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserLoginDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserLoginDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserLoginDTO.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['authType'] && !(typeof data['authType'] === 'string' || data['authType'] instanceof String)) {
            throw new Error("Expected the field `authType` to be a primitive type in the JSON string but got " + data['authType']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }

        return true;
    }


}

UserLoginDTO.RequiredProperties = ["authType", "username", "password", "uuid"];

/**
 * Loging type
 * @member {module:model/UserLoginDTO.AuthTypeEnum} authType
 */
UserLoginDTO.prototype['authType'] = undefined;

/**
 * User email address. please set email address. not set username
 * @member {String} username
 */
UserLoginDTO.prototype['username'] = undefined;

/**
 * password
 * @member {String} password
 */
UserLoginDTO.prototype['password'] = undefined;

/**
 * uuid
 * @member {String} uuid
 */
UserLoginDTO.prototype['uuid'] = undefined;





/**
 * Allowed values for the <code>authType</code> property.
 * @enum {String}
 * @readonly
 */
UserLoginDTO['AuthTypeEnum'] = {

    /**
     * value: "Anonymous"
     * @const
     */
    "Anonymous": "Anonymous",

    /**
     * value: "Registered"
     * @const
     */
    "Registered": "Registered",

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown"
};



export default UserLoginDTO;

