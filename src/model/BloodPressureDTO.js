/**
 * Kolay Asistan Mobile API
 * Kolay Asistan mobile application api layer. Revision Date: 04.12.2022
 *
 * The version of the OpenAPI document: v1
 * Contact: ahmetyagibasan@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BloodPressureDTO model module.
 * @module model/BloodPressureDTO
 * @version v1
 */
class BloodPressureDTO {
    /**
     * Constructs a new <code>BloodPressureDTO</code>.
     * @alias module:model/BloodPressureDTO
     * @param measurementDate {Date} measurementDate
     * @param small {Number} small
     * @param big {Number} big
     * @param pulse {Number} pulse
     * @param position {module:model/BloodPressureDTO.PositionEnum} position
     * @param period {module:model/BloodPressureDTO.PeriodEnum} period
     * @param hungry {module:model/BloodPressureDTO.HungryEnum} hungry
     * @param tag {String} tag
     */
    constructor(measurementDate, small, big, pulse, position, period, hungry, tag) { 
        
        BloodPressureDTO.initialize(this, measurementDate, small, big, pulse, position, period, hungry, tag);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, measurementDate, small, big, pulse, position, period, hungry, tag) { 
        obj['measurementDate'] = measurementDate;
        obj['small'] = small;
        obj['big'] = big;
        obj['pulse'] = pulse;
        obj['position'] = position || 'LeftArm';
        obj['period'] = period || 'OtherTime';
        obj['hungry'] = hungry || 'Full';
        obj['tag'] = tag;
    }

    /**
     * Constructs a <code>BloodPressureDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BloodPressureDTO} obj Optional instance to populate.
     * @return {module:model/BloodPressureDTO} The populated <code>BloodPressureDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BloodPressureDTO();

            if (data.hasOwnProperty('measurementDate')) {
                obj['measurementDate'] = ApiClient.convertToType(data['measurementDate'], 'Date');
            }
            if (data.hasOwnProperty('small')) {
                obj['small'] = ApiClient.convertToType(data['small'], 'Number');
            }
            if (data.hasOwnProperty('big')) {
                obj['big'] = ApiClient.convertToType(data['big'], 'Number');
            }
            if (data.hasOwnProperty('pulse')) {
                obj['pulse'] = ApiClient.convertToType(data['pulse'], 'Number');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'String');
            }
            if (data.hasOwnProperty('period')) {
                obj['period'] = ApiClient.convertToType(data['period'], 'String');
            }
            if (data.hasOwnProperty('hungry')) {
                obj['hungry'] = ApiClient.convertToType(data['hungry'], 'String');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BloodPressureDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BloodPressureDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BloodPressureDTO.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['position'] && !(typeof data['position'] === 'string' || data['position'] instanceof String)) {
            throw new Error("Expected the field `position` to be a primitive type in the JSON string but got " + data['position']);
        }
        // ensure the json data is a string
        if (data['period'] && !(typeof data['period'] === 'string' || data['period'] instanceof String)) {
            throw new Error("Expected the field `period` to be a primitive type in the JSON string but got " + data['period']);
        }
        // ensure the json data is a string
        if (data['hungry'] && !(typeof data['hungry'] === 'string' || data['hungry'] instanceof String)) {
            throw new Error("Expected the field `hungry` to be a primitive type in the JSON string but got " + data['hungry']);
        }
        // ensure the json data is a string
        if (data['tag'] && !(typeof data['tag'] === 'string' || data['tag'] instanceof String)) {
            throw new Error("Expected the field `tag` to be a primitive type in the JSON string but got " + data['tag']);
        }

        return true;
    }


}

BloodPressureDTO.RequiredProperties = ["measurementDate", "small", "big", "pulse", "position", "period", "hungry", "tag"];

/**
 * measurementDate
 * @member {Date} measurementDate
 */
BloodPressureDTO.prototype['measurementDate'] = undefined;

/**
 * small
 * @member {Number} small
 */
BloodPressureDTO.prototype['small'] = undefined;

/**
 * big
 * @member {Number} big
 */
BloodPressureDTO.prototype['big'] = undefined;

/**
 * pulse
 * @member {Number} pulse
 */
BloodPressureDTO.prototype['pulse'] = undefined;

/**
 * position
 * @member {module:model/BloodPressureDTO.PositionEnum} position
 * @default 'LeftArm'
 */
BloodPressureDTO.prototype['position'] = 'LeftArm';

/**
 * period
 * @member {module:model/BloodPressureDTO.PeriodEnum} period
 * @default 'OtherTime'
 */
BloodPressureDTO.prototype['period'] = 'OtherTime';

/**
 * hungry
 * @member {module:model/BloodPressureDTO.HungryEnum} hungry
 * @default 'Full'
 */
BloodPressureDTO.prototype['hungry'] = 'Full';

/**
 * tag
 * @member {String} tag
 */
BloodPressureDTO.prototype['tag'] = undefined;





/**
 * Allowed values for the <code>position</code> property.
 * @enum {String}
 * @readonly
 */
BloodPressureDTO['PositionEnum'] = {

    /**
     * value: "LeftArm"
     * @const
     */
    "LeftArm": "LeftArm",

    /**
     * value: "RightArm"
     * @const
     */
    "RightArm": "RightArm"
};


/**
 * Allowed values for the <code>period</code> property.
 * @enum {String}
 * @readonly
 */
BloodPressureDTO['PeriodEnum'] = {

    /**
     * value: "Morning"
     * @const
     */
    "Morning": "Morning",

    /**
     * value: "Noon"
     * @const
     */
    "Noon": "Noon",

    /**
     * value: "Evening"
     * @const
     */
    "Evening": "Evening",

    /**
     * value: "BeforeBed"
     * @const
     */
    "BeforeBed": "BeforeBed",

    /**
     * value: "OtherTime"
     * @const
     */
    "OtherTime": "OtherTime"
};


/**
 * Allowed values for the <code>hungry</code> property.
 * @enum {String}
 * @readonly
 */
BloodPressureDTO['HungryEnum'] = {

    /**
     * value: "Hungry"
     * @const
     */
    "Hungry": "Hungry",

    /**
     * value: "Full"
     * @const
     */
    "Full": "Full"
};



export default BloodPressureDTO;

