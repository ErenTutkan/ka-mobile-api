/**
 * Kolay Asistan Mobile API
 * Kolay Asistan mobile application api layer. Revision Date: 08.10.2023
 *
 * The version of the OpenAPI document: v4.0.1
 * Contact: ahmetyagibasan@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MedicineDTO from './MedicineDTO';
import RecipeDTODoctor from './RecipeDTODoctor';

/**
 * The RecipeDTO model module.
 * @module model/RecipeDTO
 * @version v4.0.1
 */
class RecipeDTO {
    /**
     * Constructs a new <code>RecipeDTO</code>.
     * @alias module:model/RecipeDTO
     * @param id {Number} Recipe ID
     * @param hospital {String} Hospital name
     * @param doctor {module:model/RecipeDTODoctor} 
     * @param prescriptionNo {String} Prescription No
     * @param date {Date} Visiting Date
     * @param medicines {Array.<module:model/MedicineDTO>} Medicines Detail
     */
    constructor(id, hospital, doctor, prescriptionNo, date, medicines) { 
        
        RecipeDTO.initialize(this, id, hospital, doctor, prescriptionNo, date, medicines);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, hospital, doctor, prescriptionNo, date, medicines) { 
        obj['id'] = id;
        obj['hospital'] = hospital;
        obj['doctor'] = doctor;
        obj['prescriptionNo'] = prescriptionNo;
        obj['date'] = date;
        obj['medicines'] = medicines;
    }

    /**
     * Constructs a <code>RecipeDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecipeDTO} obj Optional instance to populate.
     * @return {module:model/RecipeDTO} The populated <code>RecipeDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecipeDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('hospital')) {
                obj['hospital'] = ApiClient.convertToType(data['hospital'], 'String');
            }
            if (data.hasOwnProperty('doctor')) {
                obj['doctor'] = RecipeDTODoctor.constructFromObject(data['doctor']);
            }
            if (data.hasOwnProperty('prescriptionNo')) {
                obj['prescriptionNo'] = ApiClient.convertToType(data['prescriptionNo'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('medicines')) {
                obj['medicines'] = ApiClient.convertToType(data['medicines'], [MedicineDTO]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecipeDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecipeDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RecipeDTO.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['hospital'] && !(typeof data['hospital'] === 'string' || data['hospital'] instanceof String)) {
            throw new Error("Expected the field `hospital` to be a primitive type in the JSON string but got " + data['hospital']);
        }
        // validate the optional field `doctor`
        if (data['doctor']) { // data not null
          RecipeDTODoctor.validateJSON(data['doctor']);
        }
        // ensure the json data is a string
        if (data['prescriptionNo'] && !(typeof data['prescriptionNo'] === 'string' || data['prescriptionNo'] instanceof String)) {
            throw new Error("Expected the field `prescriptionNo` to be a primitive type in the JSON string but got " + data['prescriptionNo']);
        }
        if (data['medicines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['medicines'])) {
                throw new Error("Expected the field `medicines` to be an array in the JSON data but got " + data['medicines']);
            }
            // validate the optional field `medicines` (array)
            for (const item of data['medicines']) {
                MedicineDTO.validateJsonObject(item);
            };
        }

        return true;
    }


}

RecipeDTO.RequiredProperties = ["id", "hospital", "doctor", "prescriptionNo", "date", "medicines"];

/**
 * Recipe ID
 * @member {Number} id
 */
RecipeDTO.prototype['id'] = undefined;

/**
 * Hospital name
 * @member {String} hospital
 */
RecipeDTO.prototype['hospital'] = undefined;

/**
 * @member {module:model/RecipeDTODoctor} doctor
 */
RecipeDTO.prototype['doctor'] = undefined;

/**
 * Prescription No
 * @member {String} prescriptionNo
 */
RecipeDTO.prototype['prescriptionNo'] = undefined;

/**
 * Visiting Date
 * @member {Date} date
 */
RecipeDTO.prototype['date'] = undefined;

/**
 * Medicines Detail
 * @member {Array.<module:model/MedicineDTO>} medicines
 */
RecipeDTO.prototype['medicines'] = undefined;






export default RecipeDTO;

